{
	"id": "1620eae3-0a76-9701-1eee-d787a07c4d20",
	"name": "DocumentDB copy",
	"description": "",
	"order": [
		"7342cc0f-fab1-dac0-0cf8-b1456892ebb7",
		"e8de7f03-b71e-07ea-a12e-a40ce3e5900f",
		"6cd97893-ddc1-4b7f-e63c-b3cb2e0b25d9",
		"942224dc-0854-6cc9-1c34-1438cc82d97d",
		"d82e5bbf-da54-11ef-cf9a-929bd44a8f75",
		"fdea6835-92a9-e839-3f94-32aa00b898ab",
		"0826c4f2-082e-0a78-eee3-78312d08f7da",
		"e291f239-5697-493a-89c4-bdf8005586bb",
		"bfac04fa-925f-91f7-d878-d7b1e7d28f05",
		"8f22331c-b041-5229-8131-f52423a6363e",
		"05d6c48e-eb57-4962-af85-7d61b69d87c4",
		"2c3ac42d-346d-03e6-93a7-2cd303ba1cca",
		"ba0e6a6c-b074-8cbf-652d-aca30439b2a9",
		"1d29e9c3-0e70-24c5-f22f-f432da22c173",
		"eedffbdd-e86d-f05d-f81c-52da227b32b7",
		"e7253fa7-c2d6-fa88-b48f-644c12a2a339"
	],
	"folders": [],
	"timestamp": "2016-08-23T15:23:06.534Z",
	"owner": "872271",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "05d6c48e-eb57-4962-af85-7d61b69d87c4",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395469360,
			"name": "Get all documents",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "0826c4f2-082e-0a78-eee3-78312d08f7da",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\nContent-Type: application/json\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    // now pull out the resource id by searching for the last slash and substringing to it.\r\n    var lastPart = strippedurl.lastIndexOf(\"/\");\r\n    resourceId = strippedurl.substring(1,lastPart);\r\n    console.log(resourceId);\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395436430,
			"name": "Create Document - Wakefield Family",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"WakefieldFamily\",\r\n    \"parents\": [\r\n        { \"familyName\": \"Wakefield\", \"givenName\": \"Robin\" },\r\n        { \"familyName\": \"Miller\", \"givenName\": \"Ben\" }\r\n    ],\r\n    \"children\": [\r\n        {\r\n            \"familyName\": \"Merriam\", \r\n            \"givenName\": \"Jesse\", \r\n            \"gender\": \"female\", \"grade\": 1,\r\n            \"pets\": [\r\n                { \"givenName\": \"Goofy\" },\r\n                { \"givenName\": \"Shadow\" }\r\n            ]\r\n        },\r\n        { \r\n            \"familyName\": \"Miller\", \r\n             \"givenName\": \"Lisa\", \r\n             \"gender\": \"female\", \r\n             \"grade\": 8 }\r\n    ],\r\n    \"address\": { \"state\": \"NY\", \"county\": \"Manhattan\", \"city\": \"NY\" },\r\n    \"creationDate\": 1431620462,\r\n    \"isRegistered\": false\r\n}"
		},
		{
			"id": "1d29e9c3-0e70-24c5-f22f-f432da22c173",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs/WakefieldFamily",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395501321,
			"name": "Delete Document",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "2c3ac42d-346d-03e6-93a7-2cd303ba1cca",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\nx-ms-documentdb-isquery: true\nContent-Type: application/query+json\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395440516,
			"name": "Query Collection Family = Anderson",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": "{      \r\n    \"query\": \"SELECT * FROM Families f WHERE f.id = @familyId\",     \r\n    \"parameters\": [          \r\n        {\"name\": \"@familyId\", \"value\": \"AndersenFamily\"}         \r\n    ] \r\n}"
		},
		{
			"id": "6cd97893-ddc1-4b7f-e63c-b3cb2e0b25d9",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395410933,
			"name": "Get Database - tempdb",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "7342cc0f-fab1-dac0-0cf8-b1456892ebb7",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395392586,
			"name": "List Databases",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "8f22331c-b041-5229-8131-f52423a6363e",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\nContent-Type: application/json\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    // now pull out the resource id by searching for the last slash and substringing to it.\r\n    var lastPart = strippedurl.lastIndexOf(\"/\");\r\n    resourceId = strippedurl.substring(1,lastPart);\r\n    console.log(resourceId);\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395432682,
			"name": "Create Document - Anderson Family",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"AndersenFamily\",\r\n    \"lastName\": \"Andersen\",\r\n    \"parents\": [\r\n       { \"firstName\": \"Thomas\" },\r\n       { \"firstName\": \"Mary Kay\"}\r\n    ],\r\n    \"children\": [\r\n       {\r\n           \"firstName\": \"Henriette Thaulow\", \"gender\": \"female\", \"grade\": 5,\r\n           \"pets\": [{ \"givenName\": \"Fluffy\" }]\r\n       }\r\n    ],\r\n    \"address\": { \"state\": \"WA\", \"county\": \"King\", \"city\": \"seattle\" },\r\n    \"creationDate\": 1431620472,\r\n    \"isRegistered\": true\r\n}"
		},
		{
			"id": "942224dc-0854-6cc9-1c34-1438cc82d97d",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395418491,
			"name": "Get All Collections",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"tempcoll\"\r\n}\r\n"
		},
		{
			"id": "ba0e6a6c-b074-8cbf-652d-aca30439b2a9",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\nx-ms-documentdb-isquery: true\nContent-Type: application/query+json\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395445253,
			"name": "Query Collection with JOIN",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": "{      \r\n    \"query\": \"SELECT \r\n                 f.id AS familyName, \r\n                 c.givenName AS childGivenName, \r\n                 c.firstName AS childFirstName, \r\n                 p.givenName AS petName \r\n              FROM Families f \r\n              JOIN c IN f.children \r\n              JOIN p in c.pets\",     \r\n    \"parameters\": [] \r\n}"
		},
		{
			"id": "bfac04fa-925f-91f7-d878-d7b1e7d28f05",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\nContent-Type: application/json\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs/WakefieldFamily",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395473326,
			"name": "Update Document - Wakefield Family",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"WakefieldFamily\",\r\n    \"parents\": [\r\n        { \"familyName\": \"Wakefield\", \"givenName\": \"Robin\" },\r\n        { \"familyName\": \"Miller\", \"givenName\": \"Ben\" },\r\n        { \"familyName\" : \"Lindsay\", \"givenName\": \"Steve\" }\r\n    ],\r\n    \"children\": [\r\n        {\r\n            \"familyName\": \"Merriam\", \r\n            \"givenName\": \"Jesse\", \r\n            \"gender\": \"female\", \"grade\": 1,\r\n            \"pets\": [\r\n                { \"givenName\": \"Goofy\" },\r\n                { \"givenName\": \"Shadow\" }\r\n            ]\r\n        },\r\n        { \r\n            \"familyName\": \"Miller\", \r\n             \"givenName\": \"Lisa\", \r\n             \"gender\": \"female\", \r\n             \"grade\": 8 }\r\n    ],\r\n    \"address\": { \"state\": \"NY\", \"county\": \"Manhattan\", \"city\": \"NY\" },\r\n    \"creationDate\": 1431620462,\r\n    \"isRegistered\": false\r\n}"
		},
		{
			"id": "d82e5bbf-da54-11ef-cf9a-929bd44a8f75",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395422886,
			"name": "Create Collection - tempcoll",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"tempcoll\"\r\n}\r\n"
		},
		{
			"id": "e291f239-5697-493a-89c4-bdf8005586bb",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs/WakefieldFamily",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395465524,
			"name": "Get Document - Wakefield Family",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "e7253fa7-c2d6-fa88-b48f-644c12a2a339",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488396329071,
			"name": "Delete Database",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "e8de7f03-b71e-07ea-a12e-a40ce3e5900f",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395407045,
			"name": "Create Database - tempdb",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"tempdb\"\r\n}\r\n"
		},
		{
			"id": "eedffbdd-e86d-f05d-f81c-52da227b32b7",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488396345025,
			"name": "Delete Collection",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "fdea6835-92a9-e839-3f94-32aa00b898ab",
			"headers": "Accept: application/json\nx-ms-version: 2016-07-11\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1488395426639,
			"name": "Get Collection -  tempcoll",
			"description": "",
			"collectionId": "1620eae3-0a76-9701-1eee-d787a07c4d20",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"tempcoll\"\r\n}\r\n"
		}
	]
}
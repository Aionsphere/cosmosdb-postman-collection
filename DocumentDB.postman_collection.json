{
	"id": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
	"name": "DocumentDB",
	"description": "",
	"order": [
		"1f8a5e7f-5984-c6e2-7505-930950bdf255",
		"4e2c1134-2f64-6228-047c-de732895afd7",
		"176c513c-d438-e6c6-88f8-77c2106ebce3",
		"947258ce-2f81-bc27-5e4f-f6962a475c84",
		"1e7b01da-a296-36b1-ee14-6fdfaf793518",
		"623df4b2-adc9-0a4a-c587-a60578389714",
		"69dfa0fb-6cd9-4b1f-91c6-d33c8632d0f7",
		"2acfe584-5be5-8cc6-e777-d1d4b1dc8fe6",
		"c0c55a99-fff2-6182-7db8-005e7a2928f9",
		"fd4fce2e-1d45-b277-ab14-65e12513593e",
		"7f6bb583-4aad-79d3-9b44-10b10bb2b1d7",
		"1be1c745-1c3f-6fb9-dd50-196ba6224068",
		"6150f501-fd6f-c8ae-4101-f3028957de34",
		"d2aeae5c-2d58-a382-6426-02c464665cab",
		"508f178b-9e57-8cf4-281d-2285ac0edec2",
		"899b826b-86f7-6798-ba52-44ee76fd9cb3",
		"44c4ede6-d257-3664-cad0-17c6855273b8",
		"7931c372-5e37-ab67-c23a-8c61a4e18775",
		"f910b539-e816-83a1-b9a0-54eaa6b3b4f4",
		"3dda7122-1e5e-1a97-90ee-6b93760f7aaf",
		"5afee162-ffeb-76b4-0a3d-e9fdac1ac034",
		"30bea8ad-35ac-7abd-15a0-3be420a2a2f9",
		"4add1f09-18ea-ff39-7b6d-1ead88c0a4f8",
		"0e5c62db-aa5b-a259-1606-72e5eac124a8"
	],
	"folders": [],
	"timestamp": "2016-08-23T15:23:06.534Z",
	"owner": 0,
	"public": false,
	"requests": [
		{
			"id": "0e5c62db-aa5b-a259-1606-72e5eac124a8",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs/WakefieldFamily",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485408262302,
			"name": "Delete Document",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "176c513c-d438-e6c6-88f8-77c2106ebce3",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1474224261463,
			"name": "Get Database",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "1be1c745-1c3f-6fb9-dd50-196ba6224068",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\nContent-Type: application/json\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1474225917637,
			"name": "Change collection indexing policy",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"tempcoll\",\r\n    \"indexingPolicy\": {\r\n        \"indexingMode\": \"lazy\",\r\n        \"automatic\": false\r\n    }\r\n}\r\n"
		},
		{
			"id": "1e7b01da-a296-36b1-ee14-6fdfaf793518",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls",
			"pathVariables": {},
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"method": "GET",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"data": [],
			"dataMode": "raw",
			"name": "Get All Collections",
			"description": "",
			"descriptionFormat": "html",
			"time": 1474224881990,
			"version": 2,
			"responses": [],
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n    \"id\": \"tempcoll\"\r\n}\r\n"
		},
		{
			"id": "1f8a5e7f-5984-c6e2-7505-930950bdf255",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1472582382299,
			"name": "List Databases",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "2acfe584-5be5-8cc6-e777-d1d4b1dc8fe6",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\nContent-Type: application/json\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    // now pull out the resource id by searching for the last slash and substringing to it.\r\n    var lastPart = strippedurl.lastIndexOf(\"/\");\r\n    resourceId = strippedurl.substring(1,lastPart);\r\n    console.log(resourceId);\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1474227132111,
			"name": "Create Temp Document",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"AndersenFamily\",\r\n    \"lastName\": \"Andersen\",\r\n    \"parents\": [\r\n       { \"firstName\": \"Thomas\" },\r\n       { \"firstName\": \"Mary Kay\"}\r\n    ],\r\n    \"children\": [\r\n       {\r\n           \"firstName\": \"Henriette Thaulow\", \"gender\": \"female\", \"grade\": 5,\r\n           \"pets\": [{ \"givenName\": \"Fluffy\" }]\r\n       }\r\n    ],\r\n    \"address\": { \"state\": \"WA\", \"county\": \"King\", \"city\": \"seattle\" },\r\n    \"creationDate\": 1431620472,\r\n    \"isRegistered\": true\r\n}"
		},
		{
			"id": "30bea8ad-35ac-7abd-15a0-3be420a2a2f9",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/users/tempuser",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485407082830,
			"name": "Delete User",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "3dda7122-1e5e-1a97-90ee-6b93760f7aaf",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/users/tempuser",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485407071724,
			"name": "Get User",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "44c4ede6-d257-3664-cad0-17c6855273b8",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\nContent-Type: application/json\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs/WakefieldFamily",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485406936748,
			"name": "Update Document",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"WakefieldFamily\",\r\n    \"parents\": [\r\n        { \"familyName\": \"Wakefield\", \"givenName\": \"Robin\" },\r\n        { \"familyName\": \"Miller\", \"givenName\": \"Ben\" },\r\n        { \"familyName\" : \"Lindsay\", \"givenName\": \"Steve\" }\r\n    ],\r\n    \"children\": [\r\n        {\r\n            \"familyName\": \"Merriam\", \r\n            \"givenName\": \"Jesse\", \r\n            \"gender\": \"female\", \"grade\": 1,\r\n            \"pets\": [\r\n                { \"givenName\": \"Goofy\" },\r\n                { \"givenName\": \"Shadow\" }\r\n            ]\r\n        },\r\n        { \r\n            \"familyName\": \"Miller\", \r\n             \"givenName\": \"Lisa\", \r\n             \"gender\": \"female\", \r\n             \"grade\": 8 }\r\n    ],\r\n    \"address\": { \"state\": \"NY\", \"county\": \"Manhattan\", \"city\": \"NY\" },\r\n    \"creationDate\": 1431620462,\r\n    \"isRegistered\": false\r\n}"
		},
		{
			"id": "4add1f09-18ea-ff39-7b6d-1ead88c0a4f8",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/sprocs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485407099153,
			"name": "Get all stored procs",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "4e2c1134-2f64-6228-047c-de732895afd7",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1474224136984,
			"name": "Create Database",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"tempdb\"\r\n}\r\n"
		},
		{
			"id": "508f178b-9e57-8cf4-281d-2285ac0edec2",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs/WakefieldFamily",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485406820297,
			"name": "Get document by id",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "5afee162-ffeb-76b4-0a3d-e9fdac1ac034",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/users",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485407076808,
			"name": "List Users",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "6150f501-fd6f-c8ae-4101-f3028957de34",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485408184394,
			"name": "Delete Collection",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"tempcoll\"\r\n}\r\n"
		},
		{
			"id": "623df4b2-adc9-0a4a-c587-a60578389714",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1474224816467,
			"name": "Create Collection",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"tempcoll\"\r\n}\r\n"
		},
		{
			"id": "69dfa0fb-6cd9-4b1f-91c6-d33c8632d0f7",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll",
			"pathVariables": {},
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"method": "GET",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"data": [],
			"dataMode": "raw",
			"name": "Get Collection by id",
			"description": "",
			"descriptionFormat": "html",
			"time": 1474225019611,
			"version": 2,
			"responses": [],
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n    \"id\": \"tempcoll\"\r\n}\r\n"
		},
		{
			"id": "7931c372-5e37-ab67-c23a-8c61a4e18775",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\nContent-Type: application/json\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs/WakefieldFamily",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485407028609,
			"name": "Update document (test duplicate with changed data)",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"WakefieldFamily\",\r\n    \"parents\": [\r\n        { \"familyName\": \"Wakefield\", \"givenName\": \"Robin\" },\r\n        { \"familyName\": \"Miller\", \"givenName\": \"Ben\" }\r\n    ],\r\n    \"children\": [\r\n        {\r\n            \"familyName\": \"Merriam\", \r\n            \"givenName\": \"Jesse\", \r\n            \"gender\": \"female\", \"grade\": 1,\r\n            \"pets\": [\r\n                { \"givenName\": \"Goofy\" },\r\n                { \"givenName\": \"Shadow\" }\r\n            ]\r\n        },\r\n        { \r\n            \"familyName\": \"Miller\", \r\n             \"givenName\": \"Lisa\", \r\n             \"gender\": \"female\", \r\n             \"grade\": 8 }\r\n    ],\r\n    \"address\": { \"state\": \"NY\", \"county\": \"Manhattan\", \"city\": \"NY\" },\r\n    \"creationDate\": 1431620462,\r\n    \"isRegistered\": false\r\n}"
		},
		{
			"id": "7f6bb583-4aad-79d3-9b44-10b10bb2b1d7",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\nx-ms-documentdb-isquery: true\nContent-Type: application/query+json\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1474227258131,
			"name": "Query Collection Complex with Join",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{      \r\n    \"query\": \"SELECT \r\n                 f.id AS familyName, \r\n                 c.givenName AS childGivenName, \r\n                 c.firstName AS childFirstName, \r\n                 p.givenName AS petName \r\n              FROM Families f \r\n              JOIN c IN f.children \r\n              JOIN p in c.pets\",     \r\n    \"parameters\": [] \r\n}"
		},
		{
			"id": "899b826b-86f7-6798-ba52-44ee76fd9cb3",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485406831752,
			"name": "Get all documents",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "947258ce-2f81-bc27-5e4f-f6962a475c84",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1474224200792,
			"name": "Delete Database",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "c0c55a99-fff2-6182-7db8-005e7a2928f9",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\nContent-Type: application/json\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    // now pull out the resource id by searching for the last slash and substringing to it.\r\n    var lastPart = strippedurl.lastIndexOf(\"/\");\r\n    resourceId = strippedurl.substring(1,lastPart);\r\n    console.log(resourceId);\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1474227137617,
			"name": "Create Temp Document 2",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"WakefieldFamily\",\r\n    \"parents\": [\r\n        { \"familyName\": \"Wakefield\", \"givenName\": \"Robin\" },\r\n        { \"familyName\": \"Miller\", \"givenName\": \"Ben\" }\r\n    ],\r\n    \"children\": [\r\n        {\r\n            \"familyName\": \"Merriam\", \r\n            \"givenName\": \"Jesse\", \r\n            \"gender\": \"female\", \"grade\": 1,\r\n            \"pets\": [\r\n                { \"givenName\": \"Goofy\" },\r\n                { \"givenName\": \"Shadow\" }\r\n            ]\r\n        },\r\n        { \r\n            \"familyName\": \"Miller\", \r\n             \"givenName\": \"Lisa\", \r\n             \"gender\": \"female\", \r\n             \"grade\": 8 }\r\n    ],\r\n    \"address\": { \"state\": \"NY\", \"county\": \"Manhattan\", \"city\": \"NY\" },\r\n    \"creationDate\": 1431620462,\r\n    \"isRegistered\": false\r\n}"
		},
		{
			"id": "d2aeae5c-2d58-a382-6426-02c464665cab",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/offers",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1472924446146,
			"name": "List Offers",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
		},
		{
			"id": "f910b539-e816-83a1-b9a0-54eaa6b3b4f4",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/users",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485407062732,
			"name": "Create User",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{\r\n    \"id\": \"tempuser\"\r\n}\r\n"
		},
		{
			"id": "fd4fce2e-1d45-b277-ab14-65e12513593e",
			"headers": "Accept: application/json\nx-ms-version: 2015-12-16\nAuthorization: {{authToken}}\nx-ms-date: {{RFC1123time}}\nx-ms-documentdb-isquery: true\nContent-Type: application/query+json\n",
			"url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs",
			"preRequestScript": "// store our master key for documentdb\r\nvar mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r\nconsole.log(\"mastKey = \" + mastKey);\r\n\r\n// store our date as RFC1123 format for the request\r\nvar today = new Date();\r\nvar UTCstring = today.toUTCString();\r\npostman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r\n\r\n// Grab the request url\r\nvar url = request.url.trim(); \r\nconsole.log(\"request url = \" + url);\r\n\r\n// strip the url of the hostname up and leading slash\r\nvar strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r\nconsole.log (\"stripped Url = \" + strippedurl);\r\n\r\n// push the parts down into an array so we can determine if the call is on a specific item\r\n// or if it is on a resource (odd would mean a resource, even would mean an item)\r\nvar strippedparts = strippedurl.split(\"/\");\r\nvar truestrippedcount = (strippedparts.length - 1);\r\nconsole.log(truestrippedcount);\r\n\r\n// define resourceId/Type now so we can assign based on the amount of levels\r\nvar resourceId = \"\";\r\nvar resType = \"\";\r\n\r\n// its odd (resource request)\r\nif (truestrippedcount % 2)\r\n{\r\n    console.log(\"odd\");\r\n    // assign resource type to the last part we found.\r\n    resType = strippedparts[truestrippedcount];\r\n    console.log(resType);\r\n    \r\n    if (truestrippedcount > 1)\r\n    {\r\n        // now pull out the resource id by searching for the last slash and substringing to it.\r\n        var lastPart = strippedurl.lastIndexOf(\"/\");\r\n        resourceId = strippedurl.substring(1,lastPart);\r\n        console.log(resourceId);\r\n    }\r\n}\r\nelse // its even (item request on resource)\r\n{\r\n    console.log(\"even\");\r\n    // assign resource type to the part before the last we found (last is resource id)\r\n    resType = strippedparts[truestrippedcount - 1];\r\n    console.log(\"resType\");\r\n    // finally remove the leading slash which we used to find the resource if it was\r\n    // only one level deep.\r\n    strippedurl = strippedurl.substring(1);\r\n    console.log(\"strippedurl\");\r\n    // assign our resourceId\r\n    resourceId = strippedurl;\r\n    console.log(\"resourceId\");\r\n}\r\n\r\n// assign our verb\r\nvar verb = request.method.toLowerCase();\r\n\r\n// assign our RFC 1123 date\r\nvar date = UTCstring.toLowerCase();\r\n\r\n// parse our master key out as base64 encoding\r\nvar key = CryptoJS.enc.Base64.parse(mastKey);\r\nconsole.log(\"key = \" + key);\r\n\r\n// build up the request text for the signature so can sign it along with the key\r\nvar text = (verb || \"\").toLowerCase() + \"\\n\" + \r\n               (resType || \"\").toLowerCase() + \"\\n\" + \r\n               (resourceId || \"\") + \"\\n\" + \r\n               (date || \"\").toLowerCase() + \"\\n\" + \r\n               \"\" + \"\\n\";\r\nconsole.log(\"text = \" + text);\r\n\r\n// create the signature from build up request text\r\nvar signature = CryptoJS.HmacSHA256(text, key);\r\nconsole.log(\"sig = \" + signature);\r\n\r\n// back to base 64 bits\r\nvar base64Bits = CryptoJS.enc.Base64.stringify(signature);\r\nconsole.log(\"base64bits = \" + base64Bits);\r\n\r\n// format our authentication token and URI encode it.\r\nvar MasterToken = \"master\";\r\nvar TokenVersion = \"1.0\";\r\nauth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r\nconsole.log(\"auth = \" + auth);\r\n\r\n// set our auth token enviornmental variable.\r\npostman.setEnvironmentVariable(\"authToken\", auth);\r\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.clearEnvironmentVariable(\"RFC1123time\");\npostman.clearEnvironmentVariable(\"masterKey\");\npostman.clearEnvironmentVariable(\"authToken\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1474227181741,
			"name": "Query Collection",
			"description": "",
			"collectionId": "69bf1fb5-b3be-bcbb-5be4-3ab76228ac1a",
			"responses": [],
			"rawModeData": "{      \r\n    \"query\": \"SELECT * FROM Families f WHERE f.id = @familyId\",     \r\n    \"parameters\": [          \r\n        {\"name\": \"@familyId\", \"value\": \"AndersenFamily\"}         \r\n    ] \r\n}"
		}
	]
}
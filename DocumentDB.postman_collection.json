{
    "info": {
        "_postman_id": "1620eae3-0a76-9701-1eee-d787a07c4d20",
        "name": "DocumentDB copy",
        "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
    },
    "item": [
        {
            "name": "List Databases",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
                },
                "url": "https://{{DocumentDBHost}}/dbs"
            },
            "response": []
        },
        {
            "name": "Create Database - tempdb",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"id\": \"tempdb\"\r\n}\r\n"
                },
                "url": "https://{{DocumentDBHost}}/dbs"
            },
            "response": []
        },
        {
            "name": "Get Database - tempdb",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb"
            },
            "response": []
        },
        {
            "name": "Get All Collections",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"id\": \"tempcoll\"\r\n}\r\n"
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb/colls"
            },
            "response": []
        },
        {
            "name": "Create Collection - tempcoll",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"id\": \"tempcoll\"\r\n}\r\n"
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb/colls"
            },
            "response": []
        },
        {
            "name": "Get Collection -  tempcoll",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"id\": \"tempcoll\"\r\n}\r\n"
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll"
            },
            "response": []
        },
        {
            "name": "Create Document - Wakefield Family",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "    var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "    resourceId = strippedurl.substring(1,lastPart);\r",
                            "    console.log(resourceId);\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"id\": \"WakefieldFamily\",\r\n    \"parents\": [\r\n        { \"familyName\": \"Wakefield\", \"givenName\": \"Robin\" },\r\n        { \"familyName\": \"Miller\", \"givenName\": \"Ben\" }\r\n    ],\r\n    \"children\": [\r\n        {\r\n            \"familyName\": \"Merriam\", \r\n            \"givenName\": \"Jesse\", \r\n            \"gender\": \"female\", \"grade\": 1,\r\n            \"pets\": [\r\n                { \"givenName\": \"Goofy\" },\r\n                { \"givenName\": \"Shadow\" }\r\n            ]\r\n        },\r\n        { \r\n            \"familyName\": \"Miller\", \r\n             \"givenName\": \"Lisa\", \r\n             \"gender\": \"female\", \r\n             \"grade\": 8 }\r\n    ],\r\n    \"address\": { \"state\": \"NY\", \"county\": \"Manhattan\", \"city\": \"NY\" },\r\n    \"creationDate\": 1431620462,\r\n    \"isRegistered\": false\r\n}"
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs"
            },
            "response": []
        },
        {
            "name": "Get Document - Wakefield Family",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs/WakefieldFamily"
            },
            "response": []
        },
        {
            "name": "Update Document - Wakefield Family",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "PUT",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"id\": \"WakefieldFamily\",\r\n    \"parents\": [\r\n        { \"familyName\": \"Wakefield\", \"givenName\": \"Robin\" },\r\n        { \"familyName\": \"Miller\", \"givenName\": \"Ben\" },\r\n        { \"familyName\" : \"Lindsay\", \"givenName\": \"Steve\" }\r\n    ],\r\n    \"children\": [\r\n        {\r\n            \"familyName\": \"Merriam\", \r\n            \"givenName\": \"Jesse\", \r\n            \"gender\": \"female\", \"grade\": 1,\r\n            \"pets\": [\r\n                { \"givenName\": \"Goofy\" },\r\n                { \"givenName\": \"Shadow\" }\r\n            ]\r\n        },\r\n        { \r\n            \"familyName\": \"Miller\", \r\n             \"givenName\": \"Lisa\", \r\n             \"gender\": \"female\", \r\n             \"grade\": 8 }\r\n    ],\r\n    \"address\": { \"state\": \"NY\", \"county\": \"Manhattan\", \"city\": \"NY\" },\r\n    \"creationDate\": 1431620462,\r\n    \"isRegistered\": false\r\n}"
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs/WakefieldFamily"
            },
            "response": []
        },
        {
            "name": "Create Document - Anderson Family",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "    var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "    resourceId = strippedurl.substring(1,lastPart);\r",
                            "    console.log(resourceId);\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"id\": \"AndersenFamily\",\r\n    \"lastName\": \"Andersen\",\r\n    \"parents\": [\r\n       { \"firstName\": \"Thomas\" },\r\n       { \"firstName\": \"Mary Kay\"}\r\n    ],\r\n    \"children\": [\r\n       {\r\n           \"firstName\": \"Henriette Thaulow\", \"gender\": \"female\", \"grade\": 5,\r\n           \"pets\": [{ \"givenName\": \"Fluffy\" }]\r\n       }\r\n    ],\r\n    \"address\": { \"state\": \"WA\", \"county\": \"King\", \"city\": \"seattle\" },\r\n    \"creationDate\": 1431620472,\r\n    \"isRegistered\": true\r\n}"
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs"
            },
            "response": []
        },
        {
            "name": "Get all documents",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs"
            },
            "response": []
        },
        {
            "name": "Query Collection Family = Anderson",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    },
                    {
                        "key": "x-ms-documentdb-isquery",
                        "value": "true"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/query+json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{      \r\n    \"query\": \"SELECT * FROM Families f WHERE f.id = @familyId\",     \r\n    \"parameters\": [          \r\n        {\"name\": \"@familyId\", \"value\": \"AndersenFamily\"}         \r\n    ] \r\n}"
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs"
            },
            "response": []
        },
        {
            "name": "Query Collection with JOIN",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    },
                    {
                        "key": "x-ms-documentdb-isquery",
                        "value": "true"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/query+json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{      \r\n    \"query\": \"SELECT \r\n                 f.id AS familyName, \r\n                 c.givenName AS childGivenName, \r\n                 c.firstName AS childFirstName, \r\n                 p.givenName AS petName \r\n              FROM Families f \r\n              JOIN c IN f.children \r\n              JOIN p in c.pets\",     \r\n    \"parameters\": [] \r\n}"
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs"
            },
            "response": []
        },
        {
            "name": "Delete Document",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "DELETE",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": ""
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll/docs/WakefieldFamily"
            },
            "response": []
        },
        {
            "name": "Delete Collection",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "DELETE",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": ""
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb/colls/tempcoll"
            },
            "response": []
        },
        {
            "name": "Delete Database",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "postman.clearEnvironmentVariable(\"RFC1123time\");",
                            "postman.clearEnvironmentVariable(\"masterKey\");",
                            "postman.clearEnvironmentVariable(\"authToken\");",
                            ""
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// store our master key for documentdb\r",
                            "var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");\r",
                            "console.log(\"mastKey = \" + mastKey);\r",
                            "\r",
                            "// store our date as RFC1123 format for the request\r",
                            "var today = new Date();\r",
                            "var UTCstring = today.toUTCString();\r",
                            "postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);\r",
                            "\r",
                            "// Grab the request url\r",
                            "var url = request.url.trim(); \r",
                            "console.log(\"request url = \" + url);\r",
                            "\r",
                            "// strip the url of the hostname up and leading slash\r",
                            "var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');\r",
                            "console.log (\"stripped Url = \" + strippedurl);\r",
                            "\r",
                            "// push the parts down into an array so we can determine if the call is on a specific item\r",
                            "// or if it is on a resource (odd would mean a resource, even would mean an item)\r",
                            "var strippedparts = strippedurl.split(\"/\");\r",
                            "var truestrippedcount = (strippedparts.length - 1);\r",
                            "console.log(truestrippedcount);\r",
                            "\r",
                            "// define resourceId/Type now so we can assign based on the amount of levels\r",
                            "var resourceId = \"\";\r",
                            "var resType = \"\";\r",
                            "\r",
                            "// its odd (resource request)\r",
                            "if (truestrippedcount % 2)\r",
                            "{\r",
                            "    console.log(\"odd\");\r",
                            "    // assign resource type to the last part we found.\r",
                            "    resType = strippedparts[truestrippedcount];\r",
                            "    console.log(resType);\r",
                            "    \r",
                            "    if (truestrippedcount > 1)\r",
                            "    {\r",
                            "        // now pull out the resource id by searching for the last slash and substringing to it.\r",
                            "        var lastPart = strippedurl.lastIndexOf(\"/\");\r",
                            "        resourceId = strippedurl.substring(1,lastPart);\r",
                            "        console.log(resourceId);\r",
                            "    }\r",
                            "}\r",
                            "else // its even (item request on resource)\r",
                            "{\r",
                            "    console.log(\"even\");\r",
                            "    // assign resource type to the part before the last we found (last is resource id)\r",
                            "    resType = strippedparts[truestrippedcount - 1];\r",
                            "    console.log(\"resType\");\r",
                            "    // finally remove the leading slash which we used to find the resource if it was\r",
                            "    // only one level deep.\r",
                            "    strippedurl = strippedurl.substring(1);\r",
                            "    console.log(\"strippedurl\");\r",
                            "    // assign our resourceId\r",
                            "    resourceId = strippedurl;\r",
                            "    console.log(\"resourceId\");\r",
                            "}\r",
                            "\r",
                            "// assign our verb\r",
                            "var verb = request.method.toLowerCase();\r",
                            "\r",
                            "// assign our RFC 1123 date\r",
                            "var date = UTCstring.toLowerCase();\r",
                            "\r",
                            "// parse our master key out as base64 encoding\r",
                            "var key = CryptoJS.enc.Base64.parse(mastKey);\r",
                            "console.log(\"key = \" + key);\r",
                            "\r",
                            "// build up the request text for the signature so can sign it along with the key\r",
                            "var text = (verb || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resType || \"\").toLowerCase() + \"\\n\" + \r",
                            "               (resourceId || \"\") + \"\\n\" + \r",
                            "               (date || \"\").toLowerCase() + \"\\n\" + \r",
                            "               \"\" + \"\\n\";\r",
                            "console.log(\"text = \" + text);\r",
                            "\r",
                            "// create the signature from build up request text\r",
                            "var signature = CryptoJS.HmacSHA256(text, key);\r",
                            "console.log(\"sig = \" + signature);\r",
                            "\r",
                            "// back to base 64 bits\r",
                            "var base64Bits = CryptoJS.enc.Base64.stringify(signature);\r",
                            "console.log(\"base64bits = \" + base64Bits);\r",
                            "\r",
                            "// format our authentication token and URI encode it.\r",
                            "var MasterToken = \"master\";\r",
                            "var TokenVersion = \"1.0\";\r",
                            "auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);\r",
                            "console.log(\"auth = \" + auth);\r",
                            "\r",
                            "// set our auth token enviornmental variable.\r",
                            "postman.setEnvironmentVariable(\"authToken\", auth);\r",
                            ""
                        ]
                    }
                }
            ],
            "request": {
                "method": "DELETE",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json"
                    },
                    {
                        "key": "x-ms-version",
                        "value": "2016-07-11"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{authToken}}"
                    },
                    {
                        "key": "x-ms-date",
                        "value": "{{RFC1123time}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": ""
                },
                "url": "https://{{DocumentDBHost}}/dbs/tempdb"
            },
            "response": []
        }
    ]
}